This is my revision note for Git, I 
update it regularly when I learn 
something new. I've also included the 
basic git concepts so that a beginner
can also learn from this.
Also the indentation of the file is 
kept in such a way that the content 
can be best viewed on Github mobile app
so that you can read it on the go.
I've tried to make it free of mistakes,
but if there are any wrong information.
Or if you have anything to improve,
Feel free to create an issue for the 
same.

=====1)GIT WORKING UNDER THE HOOD=====
Git stores all the information in the
.git directory using objects.
There are four types of git objects

1.Blob: To store files
2.Tree: Information about directory
3.Commit: Helps to have different 
snapshot/versions of the project.
4.Annotated Tag: Persistent text 
pointer to specific commit.

Ex. Let's suppose you have two files in
working directory file1.txt and 
file2.txt
After initializing git, adding both 
files to staging area and finally 
commit them as 'initial commit'
Internally git will create one commit
object containing description of 
commit, author name and author email 
and associate a SHA1 hash with that.
Also note that Commit is just a wrapper 
around tree object.
Therefore it will point to a tree 
object which will eventually contain 
links to two blobs-file1.txt and
file2.txt
Special Note: git reuses blob for files
having same content and does not create
new blob to save disk space.

As this repo is meant to be regarding
git commands so there will be no more
detail regarding internal working of 
git. Also it's hard to tell everything
without using of diagrams.

==Get Info of Objects using SHA1 Hash==
Get the content
    git cat-file -p SHA1Hash

Get the size
    git cat-file -s SHA1Hash

Get the type
    git cat-file -t SHA1Hash

============2)INITIAL SETUP============
Set Git Author name and Email
git config --global user.name 'Name'
git config --global user.email 'Email'

Verify using,
    git config --list

=========3)BASIC GIT COMMANDS=========
Add file to staging area,
    git add <filename>

If you want to add all the files to the
staging area, use
    git add .

View the content of staging area,
    git ls-files

If you want to view along with SHA1
hashes use,
    git ls-files -s

To commit the files from staging area
and write changes to git repository
    git commit -m 'Your Message'

To find all the files of git repository
    find .git/objects -type f

To get history of changes(Commits)
    git log

To checkout commit or branch
    git checkout <commit id/branch>
You'll get into detached head state if 
you try to checkout to specific commit

To clone a repo
    git clone <url>

To find the modification
    git diff

To get changes made in specific commit
    git show <SHA1Hash>

=========4)GIT FILES LIFECYCLE=========
Untracked Modified Staged Unmodified

Untracked->Staged: git add[for new 
files]
Staged->Unmodified: git commit
After commit, if you change file in 
the working directory,
It will change state Unmodified->
Modified Again you've to use git add to
add it to staging area and do further 
commit.
Files can also be untracked, means can 
be moved from Unmodified->Untracked

=====Entire lifecycle in a nutshell====
---------------------------------------
WorkingDirectory|StagingArea|GitRepo
---------------------------------------
Untracked       |Staged     |
Modified        |           |
Unmodified      |Unmodified |Unmodified
---------------------------------------

When you add new file in working 
directory, it becomes untracked. Means
untracked files are only located in 
working directory.
After you stage that file, it goes into
staging area as well as present in 
working directory.
After commit, git writes everything
about the file in git repository[using
git objects] and change the state back
to unmodified.
Now the file is present in all the 
three  areas i.e. in working directory,
in staging area as well as in git 
repository
After changing the content of the file,
it changes to the modified state in the
working directory, next you have to add 
it to staging area and finally commit 
that.
And after all the steps, the file will
change the state back to unmodified and
will also be present in all the three
areas.This entire process runs in loop.

==============5)GIT BRANCH=============
Default branch is master/main
Pointers for all branches are located 
in .git/refs/heads
Current branch tracks new commits.
Branch pointer moves automatically 
after every new commit
You can't use spaces in branch name.

To list all the branch,
    git branch
To add a branch,
    git branch new-branch
To change branch,
    git checkout <branch-name>
To rename a branch,
    git branch -m <old-name> <new-name>
To delete a branch,
    git branch -d <branch-name>

Note for deletion:
With lowercase -d while deleting, you
can only delete merged branch.
If you want to delete non-merged branch
use uppercase -D

=============What is HEAD?=============
Head is reference to the currently 
checked-out branch or commit.
It is locally significant, means if can
use head locally on your system as your
wish. This is not going to affect the 
remote repo associated with that.
Pointer is located in the 
.git/HEAD file
Default pointer is ref: 
refs/heads/master
You can check where head is pointing by
viewing the content of HEAD in .git
directory and then looking up the 
content of the mentioned path.
e.g. cat refs/heads/master
It should point to the last commit if 
you have not checked out to any other
commit.

If you checkout to some other commit 
using commit SHA1hash Id, then head 
will be detached from the branch as 
branch is pointing to the last commit.
To point head back to the master 
branch,use 'git checkout branch'.

=============Merge Branch=============
To merge commit, first checkout to the
receiving branch. Then use,
git merge <merging-branch-name>
e.g. git checkout main
     git merge new-feature

There are two types of merge that git
uses:
1.Fast Forward Merge: It is possible
when there are no further commits in 
the receiving branch after the commit 
where new branch was created.
For this, git simply shift the 
receiving branch pointer and the head 
pointer to the pointer where new branch
is pointing i.e. at the very last 
commit in the new branch. There will 
not be any commits in this case while
merging.
After this new branch can be deleted.

2.Three Way Merge: This merge happens
when there are further commits in the
receiving branch after the commit where
new branch was created.
Git simply creates a brand new commits
whose parents are two commits: one is 
the last commit from the receiving
branch and other is the last commit of
the new branch.
New branch pointer still points at the
very last commit of the new branch.
After successfully merging, the new
branch can be deleted.
It is also known as recursive way of
merge and git will prompt to enter 
commit message in this case as git has
to create a brand new commit.
After writing the commit message, exit
from the terminal using esc and then 
typing :wq and pressing enter after
that.

============Merge Conflicts============
Merge conflicts don't appear in fast
forward merge.
This is only possible when there are
additional commits in receiving branch
after the commit where new branch was 
created. 
Merge conflicts occur when you edit the
same file in the new branch as well as 
the receiving branch.
If there are conflicts, git will stop
merging and tell you to solve the 
conflicts.
Git stores three different versions of
the conflicted file in the staging area
  0: common file in both the branch
     [ancestor commit file]
  1: file in the receiving branch
  2: file in the new branch
It can be verified by using command,
    git ls-files -s
and after that reading the contents of
the three different files using command
    git cat-file -p <SHA1Hash>
The options available while solving 
conflicts are: keep the change from
receiving branch, keep the change from
new branch or else modify the content
as per your wish.
After that we need to stage the file in
order for git to understand that user
has resolved the conflict.
You can do anything with the file, and
then afterwards git will be able to 
merge the branches.
It's better to use VSCode to solve the
conflicts.

===============6)GITHUB================
Git is distributed version-control
system whereas Github provides
repository hosting service.
'tree' in Github URL doesn't represent
Git tree object. Instead it is just
pointer to specific branch or commit.
e.g. /tree/master
     /tree/new-feature
     /tree/837462afhasf...(SHA1Hash)

==========7)REMOTE REPOSITORY==========
Remote repository is same as local
repository in terms of structure i.e.
we have working directory, staging area
and git repository.
Some FAQs regarding remote repo!!
Q)Do remote repo update itself after
local repo is changed?
Ans) No. You have to manually push the
file from the local repo in order for
the remote repo to update.
Q)Do local repo update itself after
remote repo is changed?
Ans) No. You have to manually pull the
file from the remote repo in order for
the local repo to update.
Q)Who has the right to push to remote
repo?
Ans)Only you and whoever you have 
provided the rights to push. Other than
that no one else can push to your repo.
Q)Who has the right to view the 
contents of my repo?
Ans)If the repo is public, then anyone.
Else only you.

========8)GIT PUSH,FETCH & PULL========
Git push means pushing the changes from
the local repo to the remote repo.
Git fetch gets the updates(branch,
commits,etc.) from the 
remote repo but doesn't update the 
staging area and working directory.
Git pull fetches the updates as well as
files and updates the staging area
as well as working directory. This is
same as doing git fetch first and then
git merge after that.

============What is Origin?============
By default when we clone a repo git
automatically creates a remote with the
name of 'origin'. This is the default
remote for you remote repository.
It can be verified using command
    git remote -v
We can have multiple remote repository
and can actually choose to which remote
repo we want to push or pull the items
from.
If we write only 'git pull' then by
default git will pull files from origin
remote.
If you use command 'git branch' that is
only going to show you local branches.
Also Git will not create corresponding
local branches for all remote branches
except default remote branch.
To show all the branches,
    git branch -a
To show only remote branches,
    git branch -r

===========Tracking Branches===========
Tracking branches are the local branch
connected specifically to the remote
branch.
It might be possible that there are
branches which are present in local
repo but are not present in remote repo
and vice-versa. These are non-tracking
branches.
When you checkout branch in local repo
which is present in remote repo but not
in local repo. Git will automatically
start tracking that branch and connect
it to the remote repo.
To list all the tracking branches,
    git branch -vv
Example for better understanding:
Let's suppose you create a remote repo
online on GitHub and create one new
branch 'new-feature' there. So the 
remote repo will have two branch:
main/master and new-feature
After cloning this repo to your local
drive there will only be one branch 
by default present 'master/main'
tracking corresponding remote branch.
It can be verified using command,
git branch -vv
Now after that if you use the command,
git checkout new-feature then git will
create one additional tracking branch
which will track the remote branch
'new-feature'
So if you type 'git branch -vv' now 
that is going to show two branches 
which tracks corresponding remote 
branch.
To show detailed information regarding
all the remote and local branch, use
    git remote show origin
If you create some branch on remote 
repo you have to use 'git fetch'
command in order to see the new branch
locally.
If you delete some branch remotely,
after that use 'git remote show origin'
and that deleted branch will be marked
as stale.
After that you can use the command
'git remote prune origin' to delete 
and now it'll not be present anymore.
'git branch -vv' will now show that
the tracking branch has been gone.
After that you can delete corresponding
local branch.

================GIT Pull===============
Pull -> Fetch + Merge FETCH_HEAD
Git fetch gets all the latest update
from the remote repo to the local repo
(such as all new commits that were 
created in the remote repo, now will be
available in the local repo).
Also creates the required objects(blob,
commit,tree,tags) for the same in .git 
folder.
After that,Git performs Merge operation
locally. Git will merge remote branch
to the local branch but by using 
FETCH_HEAD present in .git folder,
which will point to last commit in 
remote repo corresponding branch.
Also Git will try to apply fast-forward
merge if possible, else will apply
three way merge.
Git pull only updates the currently
checked out branch, not the other 
present branches.
Before pull, make sure it is tracking
branch and has corresponding remote
branch.
To watch all the background process 
that git does while pull, use the 
verbose flag(-v) like this,
    git pull -v
If we read the contents of the
FETCH_HEAD file present in .git folder
using cat .git/FETCH_HEAD
We can pretty much see everything by
ourselves, that the currently checked
out branch is for merge and other
branches are marked as not for merge.
We can also merge manually using
'git merge FETCH_HEAD'
To delete remote branch from terminal,
    git push origin -d <branch-name>
To check local references,
    ls .git/refs/heads
To check remote references,
    ls .git/refs/remotes/origin
To check local and remote references 
for a specific branch,
    git show-ref <branch-name>
To show all the reference where remote
and local branches are pointing,
    git show-ref
To change author name and email for the
very last commit,
    git commit --amend --author="Reet
    Priye" <reetpriye@gmail.com>

==============9)GIT TAGS===============
Tag is static text pointer to specific
commit.
Staging Vs Production:
  Git is primarily used for software
  development. And in modern days,
  software are developed using CI/CD
  principle.
  CI/CD: Continuous Integration/
         Continuous Development
  According to that there are two 
  environments staging and production.
  For staging mainly branch release is
  used and for production, master is 
  used.
  Staging:
           -primarily for testing
           -usually for internal use
           -merging is performed freq.
           -different branches gets 
            merged into release branch
           -multiple people may have
            merge rights
  Development: 
           -for stable production
           -for customers
           -usually online release 
            branch gets merged
           -hotfixes may go directly
            into production
           -only few people have merge
            rights

Semantic Versioning:
  Major version<-5.1.3->Patch version
                   |
              Minor version

  Minor version should be incremented,
  when there are small changes in the
  project and also it doesn't lead to 
  incompatibility of any package or
  dependencies from previous version.

  Also pre-release versioning is done
  like this 5.1.3-alpha or 5.1.3-beta
  or 5.1.3-1.3 which will be converted
  to 5.1.3 upon final release.
  Also we can use 5.1.3-rc.2[rc stands
  for release candidate], when we are
  pretty close for next release.
  Read more @ https://semver.org

Git Tags are of two types:
  Lightweight tag:
    -stored in the .git/refs/tags
    command: git tag v1.0.0
    -not pushed to remote

  Annotated tag:
    -stored in the .git/refs/tags and
    also in .git/objects
    -stores tag message
    -stores tag author and date
    command: git tag -a v1.0.0 -m 'msg'

Tag name must be unique across repo.
Tag just point to the last commit where
that tag was created.
The content can be read using command,
    cat .git/refs/tags/v1.0.0
Also it can be checked that Lightweight
tags are not present in the objects 
folder using command,
    ls -la .git/objects
An annotated tag contents can be read
using the command,
    git tag -v v1.0.0
It will throw error when used with a
lightweight tag
Also lightweight tags are not pushed
to remote by default.

To push only specific tag use command,
    git push -v <tagName>
To push tags to remote use command,
    git push -v --tags

==============10)REBASING==============
Rebasing is destructive operation, as
it creates new commits.
Rebasing is alternative way to merge
two or different branches into 
together.
One of the advantage of using rebasing
is it makes commits history linear.
But the disadvantage is that it doesn't
keep entire history of all commits.
You'll lost the data that when a 
specific branch which has been merged
was created and when that was merged.

Diagram for better understanding...

When you perform three way merge:

           feature-1 branch
         _____________________ 
        |                     |
---------------------------------------
|_______________|
 feature-2 branch

If you perform rebasing:

---------------------------------------

History is linear, you won't get the 
details when other branches were 
created or merged.

It is a two step process, where first
we need to rebase and then merge.
Steps to rebase are as follow:
1.Checkout new-branch
    git checkout new-branch
2.Rebase new-branch on top of the base
branch
    git rebase master
3.Checkout base branch
    git checkout master
4.Merge new-branch into the base branch
(Fast forward merge will be used)
    git merge new-branch

Diagram for better understanding...
Step 1:
    git checkout master
    git rebase master

             new-branch old
         _____________________     nbp
        |              ____________/
        |             | after rebase      
----------------------\
    base branch        \
                   head+master pointer

nbp: new-branch pointer
It gets dislocated, and now points to 
the last of the copied commits.

In this step, after rebasing, git
creates a copy of all the commits of
new-branch and creates brand new
commits[as parent pointer is changed] 
on top of the base branch and it points
to the very last commit of the base 
branch.
After this step, all the old commits of
the new-branch is garbage collected by
git, as the new-branch pointer moves to
the very last commit of the copied
commits.

Step 2:
    git checkout master
    git merge new-branch
And finally a fast-forward merge is 
applied without any new merge commits.
After successful rebasing, you can
delete new-branch.

=============11).GITIGNORE=============
By default, git does not ignore any
kind of files.
But if you can explicitly tell Git
which files and folder needs to be
ignored.
These rules are defined in the
.gitignore file which is placed in the 
root directory and this .gitignore file
itself must be committed.
It's better to create a .gitignore at
the starting of project.

           -GIT FILE STATUSES-

Untracked       Tracked        Ignored
          _________|_________
         |         |         |
    Unmodified  Modified   Staged

Any file in git can have untracked,
tracked or ignored status.
When we add a new files it is untracked
by default, after executing command
'git add' we can track that file.
And placing a file in .gitignore simply
indicates git to ignore that file.
Let's suppose you add 'text1.txt'
in .gitignore before it was created.
So after creation of the file git will
not tell you to stage that file and
won't have status as untracked.

Sample of .gitignore:
    #Ignore single file
    newfile.txt
    #Ignore all files in the bin folder
    bin/
    #Ignore all .tmp files
    *.tmp

Ignore previously committed file:
    One of the approach is to simply
    delete the file and add the file
    name to .gitignore.
    So that if you create that file 
    again, it'll be ignored by git.
    There is another way, where we'll
    delete that file from the local
    git repository and not delete that
    from working directory.
    Command to delete file from git
    repository
        git rm --cached <file-name>
    If you use 'git status' now, it'll
    show that the file is deleted.
    But it'll be present in the local 
    directory.

If you want pre-built gitignore file 
for your project visit
https://gitignore.io

===========12)DETACHED HEAD===========
Head always points to the last commit
of the checked out branch and with 
every new commit it moves along with
that.
But when we checkout to some specific 
commit, head goes into detached state.
e.g.  when we execute command,
    git checkout 6c34cs
After checking out to specific commit,
using it's SHA1Hash we can make some
experimental changes and commits and 
get back to the base branch and all the
experimental commits will soon be 
garbage collected by git.
Also with every new commit made in 
detached head state, head pointer moves
to the very next commit.
If we want to retain those commits,
we have to create a new branch by using
    git checkout -b <branch-name>

We can verify where head is pointing
by using command,
    cat .git/HEAD


===========13)ADVANCED GIT=============
In this section, there are commands 
which are not used regularly, but can 
be helpful in may situation.
Also there are some commands which are
quite destructive, so use that with
caution.

================Git Log================
Extended view of all commits,
    git log
One line representation of all commits,
    git log --oneline
Similar to oneliner, but shows date,
    git lg
Graphical representation which shows
commit's parent,
    git log --graph
Graphical representation which shows
commit's parent[in oneline],
    git log --graph --oneline
Logs along with quantity of changes,
    git log --stats
Logs along with actual changes,
    git log -p
Show last n commits,
    git log -n
Show last n commits in oneline,
    git log -n --oneline
Summary of all the commits made in the
repo,
    git shortlog
[By default it is sorted according to 
the name of authors]
To sort it according to quantity of 
commits made,
    git shortlog -n
To get number of commits made and name 
of author,
    git shortlog -n -s
To get number of commits made, name and
email of author,
    git shortlog -n -s -e
To get all the commits made by a author
    git log --author="<username>"
[This filter is regular expression
filter so you don't need to type full
username]
To filter commits containing some words
    git log --grep="<description text>"

Pretty formatting in git log:
To show only SHA1Hash,
    git log --pretty=format:"%H"
Here %H is a format specifier,
Some of the common specifier are:
    cn -> Committer name
    H -> Full SHA1Hash
    h -> Short SHA1Hash
    cd -> Commit date
We can also use our own text, e.g.
    git log --pretty=format:"Author of
    commit: %cn"
Visit for more pretty specifier
@ https://devhints.io/git-log-format

To get only merge commits,
    git log --merges --oneline
To get merge commits which were not
created by git,
    git log --no-merges --oneline

===============Git Reset===============
It's recommended not to use this 
command on base or public branch,
however you can use it on your local
private branch where there are no 
collaborators.
Using this command on public branch
can lead to change in history of
commits, and other collaborator might
find it difficult to work.
Git reset allows you to discard some
committed changes.
Let's say you made some commits and you
are not happy with those changes and 
you want to discard that commit or 
several commits and you want to get
back to your previous state in
repository.
There are three options available for
git reset command,
    --hard
    --mixed(default)
    --soft
If you execute,
    git reset <Commit SHA1Hash>
By default, git apply mixed mode reset.
Where git discard commit or commits,
unstage all the changes that were made
but leaves working directory as it is.
To sum up all,
In --mixed mode, git
  -discard commits
  -discard changes in the staging area
  -keep changes in working directory
Hence you have to first use command
'git add' to add those changes to 
staging area and thereafter commit 
those changes.

In --soft mode, git
  -discard commits
  -keep changes in the staging area
  -keep changes in working directory
We can simply commit the changes we
don't need to stage those changes.

In --hard mode, git
  -discard commits
  -discard changes in the staging area
  -discard changes in working directory
It is the most destructive command used
with git reset as it discards all the
commits and changes that were made 
after that specific commit.
If you've cloned the repo then simply
you can pull the commits that were
discarded after you applied 'git reset
--hard' command.

To reset by number of last n commits,
    git reset HEAD~n
Here also by default --mixed mode has 
been applied.

==============Git Revert===============
git revert <SHA1Hash>
It is safe operation and can be applied
on any public branch.
This command inverses changes of a
specific commit, let's say you are not
modified with the recent commit that
you made. So you can simply execute
command, git revert HEAD (as HEAD is
pointing to very last commit, Hence
we can also use this).
After this, git will open vim editor
with the option to modify commit 
message and after that a new commit 
will be created which will revert the
last commit.
This command is useful when you have
pushed the changes to the public branch
and someone has pulled those changes.
Now if you want to modify the commit,
git revert is your best pal there.
It does not modify the history, just
creates one additional commit.
Conflicts may arise when you revert
some commit, for that first resolve 
that in VSCode, stage those changes
and finally use 'git revert --continue'
to continue reverting those changes.

===============Git Amend===============
This command is used when you want to
modify the last commit. It is useful if
you made some typo or want to modify
some files and don't want to create
additional commit for that.
But this is a destructive command, as
it creates brand new commit and the
last commit will be garbage collected 
by Git. Therefore avoid using this 
command on public branch.

To change last commit message,
    git commit --amend -m 'New message'

To change last commit author details,
    git commit --amend --author="Reet
    Priye <reetpriye@gmail.com>"

This command can only be applied on the
latest commit, not on any other commit.

========Cherry Picking Commits=========
Cherry pick allows us to pick any
commit and insert it in the last of
current checked out branch.
When do we use this feature?
Let's suppose you are working on a
different branch and you want to choose
only one commit and insert it in the 
master branch or release branch just
for fixing some bug.
Another scenario can be, let's suppose
you moved to detached head state and
created one or two commits there but
you don't want to create another branch
and after that merge it to the base
branch. In that case you can cherry
pick that commit and hence add that 
commit to the master branch.
Be sure to checkout to the branch where
you want to add that commit.
Command to cherry pick,
    git cherry-pick <SHA1Hash>

Command to cherry pick without creating
commit,
    git cherry-pick --no-commit <SHA1>

This command will only add changes to
the staging area, but will not create
any commit.
You have to manually do that.

==============Git Reflog===============
This command actually shows log of
git operations performed on your local
system only.
Also operations in the reflog are 
stored by default 90 days.
This command is very helpful when you
have accidentally reset some commits.
Command:
    git reflog

By default, this command will show all
the changes made to the HEAD pointer.
If you want to get log of some other
branch use,
    git reflog show <branch-name>

What can be done using git reflog?
Firstly, we can checkout to any commit
present in the git reflog output, and
get into detached HEAD state to see 
contents at that time.
Also if you checkout to any specific
commit, git reflog will also record
this operation that you have done with
HEAD pointer.
We can also use 'HEAD@{n}'[check git
reflog output you'll understand]
to checkout to that commit.
If you want to revert after using git
reset and get all the commits back,
use reflog to check the HEAD logs and 
then 'git reset --hard' again to bring
back those commits.

=============Git Stashing==============
Git stashing helps you to save
uncommitted logs.
Let's suppose you have modified some
files on some other branch, added some
of the files to the staging area but
not yet committed them.
And you want to checkout to some other
branch, in this case you can stash
those changes so that when you later
checkout to that branch,you can get all
the changes back.

To stash changes, 
    git stash
After that all the files will revert
back to the original state.
And git will create commit object in
the folder .git/refs/stash
You can look at the content of those
file by using,
    cat .git/refs/stash
    and then,
    git cat-file -p <SHA1Hash>
Object type can also be checked using,
    git cat-file -t <SHA1Hash>
And you'll get this is a 'commit'
object.
Hence it means, git has created one
temporarily commit stores it in the
git objects folder and created a 
reference to that commit in .git/refs.
Now you can checkout to some other
branch and get back to this branch.
And later on when you decide to get
back those uncommitted changes use,
    git stash pop

==========Garbage Collection===========
Garbage collection is done
automatically by git in order to delete
unreachable objects or old references
in git.
We can manually run garbage collection
by executing command,
    git gc
After execution of this command, git
compresses some of the commits which 
are not used frequently in .git/pack
directory.

======Git Rebasing with Squashing======
In large repositories, with many
feature branches, many collaborators.
The technique of rebasing with 
squashing is applied when merging
specific pull-request or specific
branch into main branch-release or 
master.
This way also git history, remains
pretty clean as history is linear due
to rebasing instead of using 3-way
merge approach.
Also squashing, squash multiple commits
into one single commit.
Rebasing with squashing can be very
easily done on Github when you are
merging PR, just select the option from
the dropdown menu 'Squash and merge'.

Interactive rebasing with squashing in
the local repository:
To perform rebasing with squashing, we
need to use -i flag while rebasing.
Example:
Create new branch 'feature-1' and 
checkout to that branch.
Create some commits in the feature-1
branch and after that to rebase it,
we either need to specify the number 
of last commits like 'HEAD~n' or else
SHA1Hash of the specific commit that
comes before all the commits that you
want to squash. Use,
    git squash -i <SHA1Hash>
After that, replace 'pick' with either
's' or 'squash', save the file using
Esc->:wq->enter
After that you'll be prompted to change
commit message.
Save that again using Esc->:wq->enter
Now git has created just single commit,
instead of three commits which contains
all the changes that were made in those
commits.
Verify it using 'git log'
Now 'feature-1' branch can be safely
merged into main branch. For that,
checkout to main branch. Then use
command, git merge feature-1
In this case, fast forward merge will
be applied as rebasing has been done.