/*
======GIT WORKING UNDER THE HOOD======
Git stores all the information in the
.git directory using objects.
There are four types of git objects

1.Blob: To store files
2.Tree: Information about directory
3.Commit: Helps to have different 
snapshot/versions of the project.
4.Annotated Tag: Persistent text 
pointer to specific commit.

Ex. Let's suppose we have two files in
working directory file1.txt and 
file2.txt
After initializing git, adding both 
files to staging area and finally 
commiting them as 'initial commit'
Internally git will create one commit
object containing description of 
commit, author name and author email 
and associate a SHA1 hash with that.
Also note that Commit is just a wrapper 
around tree object.
Therefore it will point to a tree 
object which will eventually contain 
links to two blobs-file1.txt and
file2.txt
Special Note: git reuses blob for files
having same content and does not create
new blob to save disk space.

As this repo is meant to be regarding
git commands so there will be no more
detail regarding internal working of 
git. Also it's hard to tell everything
without using of diagrams.

==GET INFO OF GIT OBJECTS USING SHA1==
Get the content
    git cat-file -p SHA1Hash

Get the size
    git cat-file -s SHA1Hash

Get the type
    git cat-file -t SHA1Hash

=============INITIAL SETUP=============
Set Git Author name and Email
git config --global user.name 'Name'
git config --global user.email 'Email'

Verify using,
    git config --list

==========BASIC GIT COMMANDS==========
Add file to staging area,
    git add <filename>

If you want to add all the files to the
staging area, use
    git add .

View the content of staging area,
    git ls-files

If you want to view along with SHA1
hashes use,
    git ls-files -s

To commit the files from staging area
and write changes to git repository
    git commit -m 'Your Message'

To find all the files of git repository
    find .git/objects -type f

To get history of changes(Commits)
    git log

To checkout commit or branch
    git checkout <commit id/branch>
You'll get into detached head state if 
you try to checkout to specific commit

To clone a repo
    git clone <url>

To find the modification
    git diff
==========GIT FILES LIFECYCLE==========
Untracked Modified Staged Unmodified

Untracked->Staged: git add[for new 
files]
Staged->Unmodified: git commit
After commiting if you change file in 
the working directory,
It will change state Unmodified->
Modified Again you've to use git add to
add it to staging area and do further 
commit.
Files can also be untracked, means can 
be moved from Unmodified->Untracked

====ENTIRE LIFECYCLE IN A NUTSHELL====
---------------------------------------
WorkingDirectory|StagingArea|GitRepo
---------------------------------------
Untracked       |Staged     |
Modified        |           |
Unmodified      |Unmodified |Unmodified
---------------------------------------

When you add new file in working 
directory, it becomes untracked. Means
untracked files are only located in 
working directory.
After we stage that file, it goes into
staging area as well as present in 
working directory.
After commiting, git writes everything
about the file in git repository[using
git objects] and change the state back
to unmodified.
Now the file is present in all the 
three  areas i.e. in working directory,
in staging area as well as in git 
repository
After changing the content of the file,
it changes to the modified state in the
working directory, next we have to add 
it to staging area and finally commit 
that.
And after all the steps, the file will
change the state back to unmodified and
will also be present in all the three
areas.This entire process runs in loop.

===============GIT BRANCH==============
Default branch is master/main
Pointers for all branches are located 
in .git/refs/heads
Current branch tracks new commits.
Branch pointer moves automatically 
after every new commit
You can't use spaces in branch name.

To list all the branch,
    git branch
To add a branch,
    git branch new-branch
To change branch,
    git checkout <branch-name>
To rename a branch,
    git branch -m <old-name> <new-name>
To delete a branch,
    git branch -d <branch-name>

Note for deletion:
With lowecase -d while deleting, we can
only delete merged branch.
If you want to delete non-merged branch
use uppercase -D

=============What is HEAD?=============
Head is reference to the currently 
checked-out branch or commit.
It is locally significant, means if can
use head locally on your system as your
wish. This is not going to affect the 
remote repo associated with that.
Pointer is located in the 
.git/HEAD file
Default pointer is ref: 
refs/heads/master
You can check where head is pointing by
viewing the content of HEAD in .git
directory and then looking up the 
content of the mentioned path.
e.g. cat refs/heads/master
It should point to the last commit if 
you have not checked out to any other
commit.

If we checkout to some other commit 
using commit SHA1hash Id, then head 
will be detached from the branch as 
branch is pointing to the last commit.
To point head back to the master 
branch,use 'git checkout branch'.

=============MERGE BRANCH=============
To merge commit, first checkout to the
receiving branch. Then use,
git merge <merging-branch-name>
e.g. git checkout main
     git merge new-feature

There are two types of merge that git
uses:
1.Fast Forward Merge: It is possible
when there are no further commits in 
the receiving branch after the commit 
where new branch was created.
For this, git simply shift the 
receiving branch pointer and the head 
pointer to the pointer where new branch
is pointing i.e. at the very last 
commit in the new branch. There will 
not be any commits in this case while
merging.
After this new branch can be deleted.

2.Three Way Merge: 
*/